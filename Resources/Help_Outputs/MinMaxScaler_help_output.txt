Help on class MinMaxScaler in module sklearn.preprocessing._da
ta:

class MinMaxScaler(sklearn.base.OneToOneFeatureMixin, sklearn.base.TransformerMixin, sklearn.base.BaseEsti
mator)
 |  MinMaxScaler(feature_range=(0, 1), *, copy=True, clip=False)
 |
 |  Transform features by scaling each feature to a given range.
 |
 |  This estimator scales and translates each feature individually such
 |  that it is in the given range on the training set, e.g. between
 |  zero and one.
 |
 |  The transformation is given by::
 |
xis=0))
 |      X_scaled = X_std * (max - min) + min
 |
 |  where min, max = feature_range.
 |
 |  unit variance scaling.
 |
 |
 |  Parameters
 |  ----------
 |  feature_range : tuple (min, max), default=(0, 1)
 |      Desired range of transformed data.
 |
 |  copy : bool, default=True
 |      copy (if the input is already a numpy array).
 |
 |  clip : bool, default=False
 |      provided `feature range`.
 |
 |      .. versionadded:: 0.24
 |
 |  Attributes
 |  ----------
 |  min_ : ndarray of shape (n_features,)
 |      Per feature adjustment for minimum. Equivalent to
 |      ``min - X.min(axis=0) * self.scale_``
 |
 |  scale_ : ndarray of shape (n_features,)
 |      ``(max - min) / (X.max(axis=0) - X.min(axis=0))``
 |
 |      .. versionadded:: 0.17
 |         *scale_* attribute.
 |
 |  data_min_ : ndarray of shape (n_features,)
 |      Per feature minimum seen in the data
 |
 |      .. versionadded:: 0.17
 |         *data_min_*
 |
 |  data_max_ : ndarray of shape (n_features,)
 |      Per feature maximum seen in the data
 |
 |      .. versionadded:: 0.17
 |         *data_max_*
 |
 |  data_range_ : ndarray of shape (n_features,)
 |
 |      .. versionadded:: 0.17
 |         *data_range_*
 |
 |  n_features_in_ : int
 |      Number of features seen during :term:`fit`.
 |
 |      .. versionadded:: 0.24
 |
 |  n_samples_seen_ : int
 |      The number of samples processed by the estimator.
 |      ``partial_fit`` calls.
 |
 |  feature_names_in_ : ndarray of shape (`n_features_in_`,)
 |      has feature names that are all strings.
 |
 |      .. versionadded:: 1.0
 |
 |  See Also
 |  --------
 |
 |  Notes
 |  -----
 |  transform.
 |
 |  see :ref:`examples/preprocessing/plot_all_scaling.py
 |
 |  Examples
 |  --------
 |  >>> from sklearn.preprocessing import MinMaxScaler
 |  >>> data = [[-1, 2], [-0.5, 6], [0, 10], [1, 18]]
 |  >>> scaler = MinMaxScaler()
 |  >>> print(scaler.fit(data))
 |  MinMaxScaler()
 |  >>> print(scaler.data_max_)
 |  [ 1. 18.]
 |  >>> print(scaler.transform(data))
 |  [[0.   0.  ]
 |   [0.25 0.25]
 |   [0.5  0.5 ]
 |   [1.   1.  ]]
 |  >>> print(scaler.transform([[2, 2]]))
 |  [[1.5 0. ]]
 |
 |  Method resolution order:
 |      MinMaxScaler
 |      sklearn.base.OneToOneFeatureMixin
 |      sklearn.base.TransformerMixin
 |      sklearn.utils._set_output._SetOutputMixin
 |      sklearn.base.BaseEstimator
 |      builtins.object
 |
 |  Methods defined here:
 |
 |
 |  fit(self, X, y=None)
 |
 |      Parameters
 |      ----------
 |      X : array-like of shape (n_samples, n_features)
 |          used for later scaling along the features axis.
 |
 |      y : None
 |          Ignored.
 |
 |      Returns
 |      -------
 |      self : object
 |          Fitted scaler.
 |
 |  inverse_transform(self, X)
 |      Undo the scaling of X according to feature_range.
 |
 |      Parameters
 |      ----------
 |      X : array-like of shape (n_samples, n_features)
 |
 |      Returns
 |      -------
 |      Xt : ndarray of shape (n_samples, n_features)
 |          Transformed data.
 |
 |  partial_fit(self, X, y=None)
 |
 |
 |      Parameters
 |      ----------
 |      X : array-like of shape (n_samples, n_features)
 |          used for later scaling along the features axis.
 |
 |      y : None
 |          Ignored.
 |
 |      Returns
 |      -------
 |      self : object
 |          Fitted scaler.
 |
 |  transform(self, X)
 |      Scale features of X according to feature_range.
 |
 |      Parameters
 |      ----------
 |      X : array-like of shape (n_samples, n_features)
 |          Input data that will be transformed.
 |
 |      Returns
 |      -------
 |      Xt : ndarray of shape (n_samples, n_features)
 |          Transformed data.
 |
 |  Data and other attributes defined here:
 |
 |
 |  Methods inherited from sklearn.base.OneToOneFeatureMixin:
 |
 |  get_feature_names_out(self, input_features=None)
 |      Get output feature names for transformation.
 |
 |      Parameters
 |      ----------
 |          Input features.
 |
 |            `["x0", "x1", ..., "x(n_features_in_ - 1)"]`.
 |
 |      Returns
 |      -------
 |      feature_names_out : ndarray of str objects
 |          Same as input features.
 |
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
 |
 |  Methods inherited from sklearn.base.TransformerMixin:
 |
 |  fit_transform(self, X, y=None, **fit_params)
 |      Fit to data, then transform it.
 |
 |      and returns a transformed version of `X`.
 |
 |      Parameters
 |      ----------
 |      X : array-like of shape (n_samples, n_features)
 |          Input samples.
 |
 |      y :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None-- Mo
 |
 |      **fit_params : dict
 |          Additional fit parameters.
 |
 |      Returns
 |      -------
 |          Transformed array.
 |
 |
 |  set_output(self, *, transform=None)
 |      Set output container.
 |
 |      for an example on how to use the API.
 |
 |      Parameters
 |      ----------
 |      transform : {"default", "pandas"}, default=None
 |
 |          - `"pandas"`: DataFrame output
 |          - `None`: Transform configuration is unchanged
 |
 |      Returns
 |      -------
 |      self : estimator instance
 |          Estimator instance.
 |
 |
 |      This method is called when a class is subclassed.
 |
 |      The default implementation does nothing. It may be
 |      overridden to extend subclasses.
 |
 |  Methods inherited from sklearn.base.BaseEstimator:
 |
 |  __getstate__(self)
 |
 |  __repr__(self, N_CHAR_MAX=700)
 |      Return repr(self).
 |
 |  __setstate__(self, state)
 |
 |  get_params(self, deep=True)
 |      Get parameters for this estimator.
 |
 |      Parameters
 |      ----------
 |      deep : bool, default=True
 |          contained subobjects that are estimators.
 |
 |      Returns
 |      -------
 |      params : dict
 |          Parameter names mapped to their values.
 |
 |  set_params(self, **params)
 |      Set the parameters of this estimator.
 |
 |      possible to update each component of a nested object.
 |
 |      Parameters
 |      ----------
 |      **params : dict
 |          Estimator parameters.
 |
 |      Returns
 |      -------
 |      self : estimator instance
 |          Estimator instance.
